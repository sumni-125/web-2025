/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-23 00:55:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import tripMate.model.MarkerData;
import tripMate.model.Schedule;

public final class tripSet_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("tripMate.model.MarkerData");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("tripMate.model.Schedule");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>여행 일정 확인</title>\r\n");
      out.write("<link href=\"css/header.css\" rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write("@import\r\n");
      out.write("	url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap')\r\n");
      out.write("	;\r\n");
      out.write("\r\n");
      out.write("* {\r\n");
      out.write("	font-family: \"Noto Sans KR\", serif;\r\n");
      out.write("	font-optical-sizing: auto;\r\n");
      out.write("	font-weight: 400;\r\n");
      out.write("	font-style: normal;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 스타일은 그대로 */\r\n");
      out.write("body {\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	font-family: sans-serif;\r\n");
      out.write("	min-width: 1000px;\r\n");
      out.write("	background-color: #f9fafb;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".map_wrap {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: row;\r\n");
      out.write("	gap: 20px;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#map {\r\n");
      out.write("	width: 70%;\r\n");
      out.write("	height: 680px;\r\n");
      out.write("	border-radius: 10px;\r\n");
      out.write("	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar {\r\n");
      out.write("	width: 25%;\r\n");
      out.write("	background-color: #ffffff;\r\n");
      out.write("	border-radius: 10px;\r\n");
      out.write("	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n");
      out.write("	padding: 20px 30px;\r\n");
      out.write("	height: 640px;\r\n");
      out.write("	overflow-y: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".location-box {\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	margin-bottom: 8px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".location-box:hover {\r\n");
      out.write("	background-color: #f5f5f5;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h2 {\r\n");
      out.write("	margin: 0 3px 15px 3px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("select, input[type=\"text\"] {\r\n");
      out.write("	margin-bottom: 10px;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#titleInput {\r\n");
      out.write("	font-size: 30px;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	margin-bottom: 20px;\r\n");
      out.write("	outline: none;\r\n");
      out.write("	border: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".location-box textarea {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	height: 60px;\r\n");
      out.write("	margin-top: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".location-box button {\r\n");
      out.write("	margin-top: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".next-button {\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	background-color: #0095f6;\r\n");
      out.write("	color: white;\r\n");
      out.write("	border: none;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	margin-top: 15px;\r\n");
      out.write("	font-weight: 500;\r\n");
      out.write("	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\r\n");
      out.write("	font-size: 17px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".next-button:hover {\r\n");
      out.write("	filter: brightness(110%);\r\n");
      out.write("	transition: filter 0.2s;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#daySelector {\r\n");
      out.write("	height: 30px;\r\n");
      out.write("	margin-bottom: 15px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=565692454f10b190707ac97f8b7e88bf\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<header>\r\n");
      out.write("	<div class=\"logo\">\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/main\"><img class=\"logoImg\" src=\"image/logo.png\"\r\n");
      out.write("			alt=\"\"></a>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/myTrip\">여행일정</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/mainsearch\">관광지</a>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/mainblog\">블로그</a>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/myPage\">마이페이지</a>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("</header>\r\n");
      out.write("\r\n");
      out.write("	<div style=\"display: flex;\">\r\n");
      out.write("		<div id=\"map\"></div>\r\n");
      out.write("		<div class=\"sidebar\">\r\n");
      out.write("			");

			Schedule sc = (Schedule) session.getAttribute("sc");
			
      out.write("\r\n");
      out.write("			");

			if (sc != null) {
			
      out.write("\r\n");
      out.write("			<div style=\"margin-bottom: 20px;\">\r\n");
      out.write("				<input type=\"text\" id=\"scheduleTitleInput\" value=\"");
      out.print(sc.getName());
      out.write("\"\r\n");
      out.write("					style=\"font-size: 20px; font-weight: bold; width: 100%;\" />\r\n");
      out.write("				<p>\r\n");
      out.write("					여행 장소:\r\n");
      out.write("					");
      out.print(sc.getPlace_name());
      out.write("</p>\r\n");
      out.write("				<p>\r\n");
      out.write("					여행 기간:\r\n");
      out.write("					");
      out.print(sc.getStart_date());
      out.write("\r\n");
      out.write("					~\r\n");
      out.write("					");
      out.print(sc.getEnd_date());
      out.write("</p>\r\n");
      out.write("			</div>\r\n");
      out.write("			");

			}
			
      out.write("\r\n");
      out.write("\r\n");
      out.write("			<select id=\"daySelector\" onchange=\"filterMarkersByDay()\">\r\n");
      out.write("				<option value=\"\">전체 보기</option>\r\n");
      out.write("				<option value=\"day1\">Day 1</option>\r\n");
      out.write("				<option value=\"day2\">Day 2</option>\r\n");
      out.write("				<option value=\"day3\">Day 3</option>\r\n");
      out.write("			</select>\r\n");
      out.write("			<div id=\"locationList\"></div>\r\n");
      out.write("			<button class=\"next-button\" onclick=\"goToNextPage()\">저장하기</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("const map = new kakao.maps.Map(document.getElementById('map'), {\r\n");
      out.write("	center: new kakao.maps.LatLng(37.5540728564304, 126.92060469962539),\r\n");
      out.write("	level: 3\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("const markers = [];\r\n");
      out.write("const markerData = [\r\n");
      out.write("	");
ArrayList<MarkerData> markers = (ArrayList<MarkerData>) session.getAttribute("savedMarkers");
if (markers != null) {
	for (MarkerData marker : markers) {
		String safeAddress = marker.getAddress().replace("'", "\\'");
      out.write("\r\n");
      out.write("	{\r\n");
      out.write("		markerId: '");
      out.print( marker.getMarkerId() );
      out.write("',\r\n");
      out.write("		sd_code: '");
      out.print( marker.getSd_code() );
      out.write("',\r\n");
      out.write("		lat: ");
      out.print(marker.getLat());
      out.write(",\r\n");
      out.write("		lng: ");
      out.print(marker.getLng());
      out.write(",\r\n");
      out.write("		address: '");
      out.print(safeAddress);
      out.write("',\r\n");
      out.write("		day: '");
      out.print(marker.getDayS());
      out.write("',\r\n");
      out.write("		dayOrder: ");
      out.print(marker.getDayOrder());
      out.write(",\r\n");
      out.write("		description: \"");
      out.print(marker.getDescription() == null ? "" : marker.getDescription());
      out.write("\"\r\n");
      out.write("	},\r\n");
      out.write("	");
}
}
      out.write("\r\n");
      out.write("];\r\n");
      out.write("\r\n");
      out.write("function createMarker(lat, lng, address, day, dayOrder) {\r\n");
      out.write("	const position = new kakao.maps.LatLng(lat, lng);\r\n");
      out.write("	const kakaoMarker = new kakao.maps.Marker({\r\n");
      out.write("		position: position,\r\n");
      out.write("		map: map\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	const infoWindow = new kakao.maps.InfoWindow({\r\n");
      out.write("		content: '<div style=\"padding:5px;\">' + day + ' - ' + dayOrder + '번째 장소<br>' + address + '</div>'\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	infoWindow.open(map, kakaoMarker);\r\n");
      out.write("\r\n");
      out.write("	return { marker: kakaoMarker, info: infoWindow };\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function displayLocationList(day) {\r\n");
      out.write("	const locationList = document.getElementById('locationList');\r\n");
      out.write("	locationList.innerHTML = '';\r\n");
      out.write("\r\n");
      out.write("	const filteredMarkers = markerData.filter(marker => !day || marker.day === day);\r\n");
      out.write("\r\n");
      out.write("	filteredMarkers.forEach((marker, index) => {\r\n");
      out.write("		const box = document.createElement('div');\r\n");
      out.write("		box.className = 'location-box';\r\n");
      out.write("		box.innerHTML =\r\n");
      out.write("			'<strong>' + marker.day + ' - ' + marker.dayOrder + '번째 장소</strong><br>' +\r\n");
      out.write("			'주소: ' + marker.address + '<br>' +\r\n");
      out.write("			'위도: ' + marker.lat + '<br>' +\r\n");
      out.write("			'경도: ' + marker.lng +\r\n");
      out.write("			'<textarea placeholder=\"부가 설명을 입력하세요\" oninput=\"updateDescription(' + index + ', this.value)\">' + marker.description + '</textarea>' +\r\n");
      out.write("			'<button onclick=\"goToLocation(' + marker.lat + ', ' + marker.lng + ')\">이 위치로 이동</button>';\r\n");
      out.write("\r\n");
      out.write("		box.onclick = function() {\r\n");
      out.write("			moveToMarker(marker.lat, marker.lng, marker.address);\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		locationList.appendChild(box);\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function moveToMarker(lat, lng, address) {\r\n");
      out.write("	const moveLatLon = new kakao.maps.LatLng(lat, lng);\r\n");
      out.write("	map.setCenter(moveLatLon);\r\n");
      out.write("	map.setLevel(3);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function updateDescription(index, value) {\r\n");
      out.write("	markerData[index].description = value;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function filterMarkersByDay() {\r\n");
      out.write("	const selectedDay = document.getElementById('daySelector').value;\r\n");
      out.write("	displayLocationList(selectedDay);\r\n");
      out.write("	updateMapMarkers(selectedDay);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function updateMapMarkers(day) {\r\n");
      out.write("	markers.forEach(marker => {\r\n");
      out.write("		marker.marker.setMap(null);\r\n");
      out.write("		marker.info.close();\r\n");
      out.write("	});\r\n");
      out.write("	markers.length = 0;\r\n");
      out.write("\r\n");
      out.write("	const filteredMarkers = markerData.filter(marker => !day || marker.day === day);\r\n");
      out.write("	filteredMarkers.forEach(marker => {\r\n");
      out.write("		const newMarker = createMarker(marker.lat, marker.lng, marker.address, marker.day, marker.dayOrder);\r\n");
      out.write("		markers.push(newMarker);\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function getTripTitle() {\r\n");
      out.write("	return document.getElementById('scheduleTitleInput').value.trim();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function goToNextPage() {\r\n");
      out.write("	window.location.href = '");
      out.print(request.getContextPath());
      out.write("/myTrip';\r\n");
      out.write("	const tripTitle = getTripTitle();\r\n");
      out.write("	if (!tripTitle) {\r\n");
      out.write("		alert(\"일정 제목을 입력해주세요.\");\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	const data = {\r\n");
      out.write("		title: tripTitle,\r\n");
      out.write("		markers: markerData\r\n");
      out.write("	};\r\n");
      out.write("\r\n");
      out.write("	fetch('");
      out.print(request.getContextPath());
      out.write("/tripSet', {\r\n");
      out.write("		method: 'POST',\r\n");
      out.write("		headers: {\r\n");
      out.write("			'Content-Type': 'application/json; charset=UTF-8'\r\n");
      out.write("		},\r\n");
      out.write("		body: JSON.stringify(data)\r\n");
      out.write("	})\r\n");
      out.write("	.then(response => response.json())\r\n");
      out.write("	.then(data => {\r\n");
      out.write("		if (data.status === \"success\") {\r\n");
      out.write("			window.location.href = '");
      out.print(request.getContextPath());
      out.write("/myTrip';\r\n");
      out.write("		}\r\n");
      out.write("	})\r\n");
      out.write("	.catch(error => {\r\n");
      out.write("		console.error(\"전송 오류:\", error);\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("displayLocationList('');\r\n");
      out.write("updateMapMarkers('');\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
