/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-23 00:58:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import tripMate.model.LocationHotelDTO;
import tripMate.model.LocationInfoDTO;
import tripMate.model.SearchDTO;
import java.util.List;

public final class searchList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("tripMate.model.SearchDTO");
    _jspx_imports_classes.add("tripMate.model.LocationHotelDTO");
    _jspx_imports_classes.add("tripMate.model.LocationInfoDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<link href=\"css/header.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("body {\n");
      out.write("    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n");
      out.write("    padding: 30px;\n");
      out.write("    margin: 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("h2 {\n");
      out.write("    text-align: center;\n");
      out.write("    margin: 50px 0 20px;\n");
      out.write("    font-size: 1.8rem;\n");
      out.write("    color: #2c3e50;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".wrap {\n");
      out.write("    display: grid;\n");
      out.write("    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n");
      out.write("    gap: 30px;\n");
      out.write("    justify-content: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".img_info {\n");
      out.write("    background-color: white;\n");
      out.write("    border-radius: 15px;\n");
      out.write("    overflow: hidden;\n");
      out.write("    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n");
      out.write("    transition: transform 0.3s ease, box-shadow 0.3s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".img_info:hover {\n");
      out.write("    transform: translateY(-7px);\n");
      out.write("    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".img {\n");
      out.write("    height: 200px;\n");
      out.write("    overflow: hidden;\n");
      out.write("    background-color: #dfe6e9;\n");
      out.write("    display: flex;\n");
      out.write("    justify-content: center;\n");
      out.write("    align-items: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".img img {\n");
      out.write("    width: 100%;\n");
      out.write("    height: 100%;\n");
      out.write("    object-fit: cover;\n");
      out.write("    display: block;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".content {\n");
      out.write("    padding: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".content h3 {\n");
      out.write("    margin: 0 0 10px;\n");
      out.write("    font-size: 1.2rem;\n");
      out.write("    color: #34495e;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".content p {\n");
      out.write("    margin: 5px 0;\n");
      out.write("    font-size: 0.95rem;\n");
      out.write("    color: #636e72;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".title_con {\n");
      out.write("    font-weight: 500;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<header>\n");
      out.write("	<div class=\"logo\">\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/main\"><img class=\"logoImg\" src=\"image/logo.png\"\n");
      out.write("			alt=\"\"></a>\n");
      out.write("	</div>\n");
      out.write("	<div>\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/myTrip\">여행일정</a>\n");
      out.write("	</div>\n");
      out.write("	<div>\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/mainsearch\">관광지</a>\n");
      out.write("\n");
      out.write("	</div>\n");
      out.write("	<div>\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/mainblog\">블로그</a>\n");
      out.write("\n");
      out.write("	</div>\n");
      out.write("	<div>\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/myPage\">마이페이지</a>\n");
      out.write("\n");
      out.write("	</div>\n");
      out.write("</header>\n");
      out.write("\n");
 List<SearchDTO> list = (List<SearchDTO>)request.getAttribute("list"); 
      out.write('\n');
      out.write('\n');
 if (list != null && !list.isEmpty()) { 
      out.write("\n");
      out.write("<ul>\n");
 for(SearchDTO sd : list) { 
      out.write("\n");
      out.write("    <h2>");
      out.print( sd.getLocation() );
      out.write("</h2>\n");
      out.write("    \n");
      out.write("    \n");
 List<LocationInfoDTO> lite =(List<LocationInfoDTO> ) request.getAttribute("lite"); 
      out.write("\n");
      out.write("\n");
      out.write("<h2>추천 관광지</h2>\n");
      out.write("<div class = \"wrap\">\n");
for(LocationInfoDTO lit : lite){ 
      out.write("\n");
      out.write("<div class = \"img_info\">\n");
      out.write("	<div class = \"img\">\n");
      out.write("	<img src = \"locc/");
      out.print( lit.getImg_url() );
      out.write("\" alt = \"관광지 이미지\" style = \"width : 300px; height: 250px;\"></div>\n");
      out.write("	<div class = \"content\">\n");
      out.write("	<h3>");
      out.print( lit.getTitle() );
      out.write("</h3>\n");
      out.write("	<br>\n");
      out.write("	<p class = \"title_con\">");
      out.print( lit.getContent() );
      out.write("</p>\n");
      out.write("	<br>\n");
      out.write("	<p>");
      out.print( lit.getAddress() );
      out.write("</p>\n");
      out.write("	</div>\n");
      out.write("</div>\n");
} 
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
 List<LocationHotelDTO> hotel =(List<LocationHotelDTO> ) request.getAttribute("hotel"); 
      out.write("\n");
      out.write("\n");
      out.write("<h2>추천 숙소</h2>\n");
      out.write("<div class = \"wrap\">\n");
for(LocationHotelDTO lit : hotel){ 
      out.write("\n");
      out.write("<div class = \"img_info\">\n");
      out.write("	<div class = \"img\">\n");
      out.write("	<img src = \"hotel/");
      out.print( lit.getImg_url() );
      out.write("\" style = \"width : 300px; height: 250px;\"></div>\n");
      out.write("	<div class = \"content\">\n");
      out.write("	<h3>");
      out.print( lit.getTitle() );
      out.write("</h3>\n");
      out.write("	<br>\n");
      out.write("	\n");
      out.write("	<!-- 별점 -->\n");
      out.write("	");

    int rating = lit.getRate(); // 예: DB에서 받아온 별점 (1~5)
    for(int i = 1; i <= 5; i++) {
        if(i <= rating) {

      out.write("\n");
      out.write("            <span style=\"color: gold; font-size: 20px;\">★</span>\n");

        } else {

      out.write("\n");
      out.write("            <span style=\"color: lightgray; font-size: 20px;\">☆</span>\n");

        }
    }

      out.write("\n");
      out.write("\n");
      out.write("	<p class = \"title_con\">가격 : ");
      out.print( lit.getPrice() );
      out.write("</p>\n");
      out.write("	<p>주소 : ");
      out.print( lit.getAddress() );
      out.write("</p>\n");
      out.write("	</div>\n");
      out.write("</div>\n");
} 
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
 } 
      out.write("\n");
      out.write("</ul>\n");
 } else { 
      out.write("\n");
      out.write("    <script>\n");
      out.write("        alert(\"검색 결과가 없습니다.\");\n");
      out.write("        location.href=\"/blogTest/mainsearch\";\n");
      out.write("    </script>\n");
 } 
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
