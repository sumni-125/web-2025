/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-23 00:55:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\" />\r\n");
      out.write("	<title>여행 지도</title>\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("	<link href=\"css/map.css\" rel=\"stylesheet\">\r\n");
      out.write("	<link href=\"css/header.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<header>\r\n");
      out.write("	<div class=\"logo\">\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/main\"><img class=\"logoImg\" src=\"image/logo.png\" alt=\"\"></a>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div><a href=\"");
      out.print(request.getContextPath());
      out.write("/myTrip\">여행일정</a></div>\r\n");
      out.write("	<div><a href=\"\">관광지</a></div>\r\n");
      out.write("	<div><a href=\"\">블로그</a></div>\r\n");
      out.write("	<div><a href=\"");
      out.print(request.getContextPath());
      out.write("/myPage\">마이페이지</a></div>\r\n");
      out.write("</header>\r\n");
      out.write("\r\n");
      out.write("<div class=\"map_wrap\">\r\n");
      out.write("	<div id=\"map\"></div>\r\n");
      out.write("	<div class=\"side\">\r\n");
      out.write("		<div id=\"clickLatlng\">📍 마커 위치: 없음</div>\r\n");
      out.write("		<select id=\"daySelector\" onchange=\"filterMarkersByDay()\"></select>\r\n");
      out.write("		<button onclick=\"saveMarker()\">저장</button>\r\n");
      out.write("		<div id=\"savedCoords\"></div>\r\n");
      out.write("		<button id=\"nextButton\" onclick=\"sendMarkersToServer()\">다음</button>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Kakao 지도 API -->\r\n");
      out.write("<script src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=565692454f10b190707ac97f8b7e88bf&libraries=services\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	const dayList = JSON.parse('");
      out.print(request.getAttribute("dayListJson"));
      out.write("');\r\n");
      out.write("	const sd_code = '");
      out.print( request.getAttribute("sd_code") );
      out.write("';\r\n");
      out.write("\r\n");
      out.write("	const daySelector = document.getElementById('daySelector');\r\n");
      out.write("	dayList.forEach((day, idx) => {\r\n");
      out.write("		const option = document.createElement('option');\r\n");
      out.write("		option.value = day;\r\n");
      out.write("		option.textContent = \"Day \" + (idx + 1);\r\n");
      out.write("		daySelector.appendChild(option);\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	const map = new kakao.maps.Map(document.getElementById('map'), {\r\n");
      out.write("		center: new kakao.maps.LatLng(37.5540728564304, 126.92060469962539),\r\n");
      out.write("		level: 3\r\n");
      out.write("	});\r\n");
      out.write("	const geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\r\n");
      out.write("	let tempMarker = null;\r\n");
      out.write("	let tempInfoWindow = null;\r\n");
      out.write("	const savedMarkers = [];\r\n");
      out.write("\r\n");
      out.write("	kakao.maps.event.addListener(map, 'click', function (mouseEvent) {\r\n");
      out.write("		const latlng = mouseEvent.latLng;\r\n");
      out.write("		geocoder.coord2Address(latlng.getLng(), latlng.getLat(), function (result, status) {\r\n");
      out.write("			if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("				const roadAddr = result[0].address.address_name;\r\n");
      out.write("				const content = '<div class=\"preview-info\">' + roadAddr + '</div>';\r\n");
      out.write("\r\n");
      out.write("				if (tempMarker) tempMarker.setMap(null);\r\n");
      out.write("				if (tempInfoWindow) tempInfoWindow.close();\r\n");
      out.write("\r\n");
      out.write("				tempMarker = new kakao.maps.Marker({ position: latlng, map: map });\r\n");
      out.write("				tempInfoWindow = new kakao.maps.InfoWindow({ content: content, position: latlng });\r\n");
      out.write("				tempInfoWindow.open(map, tempMarker);\r\n");
      out.write("\r\n");
      out.write("				tempMarker.roadAddress = roadAddr;\r\n");
      out.write("				tempMarker.latlng = latlng;\r\n");
      out.write("\r\n");
      out.write("				document.getElementById('clickLatlng').innerHTML = '📍 주소: ' + roadAddr;\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	function saveMarker() {\r\n");
      out.write("		if (!tempMarker) return;\r\n");
      out.write("\r\n");
      out.write("		const latlng = tempMarker.latlng;\r\n");
      out.write("		const roadAddr = tempMarker.roadAddress;\r\n");
      out.write("		const selectedDay = document.getElementById('daySelector').value;\r\n");
      out.write("\r\n");
      out.write("		const savedMarker = new kakao.maps.Marker({ position: latlng, map: map });\r\n");
      out.write("\r\n");
      out.write("		savedMarkers.push({\r\n");
      out.write("			marker: savedMarker,\r\n");
      out.write("			info: null,\r\n");
      out.write("			address: roadAddr,\r\n");
      out.write("			latlng: latlng,\r\n");
      out.write("			day: selectedDay,\r\n");
      out.write("			description: \"\"\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		updateLocationList();\r\n");
      out.write("\r\n");
      out.write("		tempMarker.setMap(null);\r\n");
      out.write("		tempInfoWindow.close();\r\n");
      out.write("		tempMarker = null;\r\n");
      out.write("		tempInfoWindow = null;\r\n");
      out.write("\r\n");
      out.write("		document.getElementById('clickLatlng').innerHTML = '📍 마커 위치: 없음';\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function deleteMarker(index) {\r\n");
      out.write("		savedMarkers[index].marker.setMap(null);\r\n");
      out.write("		if (savedMarkers[index].info) savedMarkers[index].info.close();\r\n");
      out.write("		savedMarkers.splice(index, 1);\r\n");
      out.write("		updateLocationList();\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function updateLocationList() {\r\n");
      out.write("		const selectedDay = document.getElementById('daySelector').value;\r\n");
      out.write("		const savedCoords = document.getElementById('savedCoords');\r\n");
      out.write("		savedCoords.innerHTML = '';\r\n");
      out.write("		let count = 1;\r\n");
      out.write("\r\n");
      out.write("		savedMarkers.forEach((marker, index) => {\r\n");
      out.write("			if (marker.day === selectedDay) {\r\n");
      out.write("				const lat = marker.latlng.getLat().toFixed(6);\r\n");
      out.write("				const lng = marker.latlng.getLng().toFixed(6);\r\n");
      out.write("\r\n");
      out.write("				if (marker.info) marker.info.close();\r\n");
      out.write("				const infoWindow = new kakao.maps.InfoWindow({\r\n");
      out.write("					content: '<div class=\"saved-info\">' + count + '번째 장소<br>' + marker.address + '</div>',\r\n");
      out.write("					position: marker.latlng\r\n");
      out.write("				});\r\n");
      out.write("				infoWindow.open(map, marker.marker);\r\n");
      out.write("				marker.info = infoWindow;\r\n");
      out.write("\r\n");
      out.write("				const box = document.createElement('div');\r\n");
      out.write("				box.className = 'saved-location';\r\n");
      out.write("				box.innerHTML =\r\n");
      out.write("					'<div>' + count + '번째 장소</div>' +\r\n");
      out.write("					'<div>주소: ' + marker.address + '</div>' +\r\n");
      out.write("					'<div>위도: ' + lat + '</div>' +\r\n");
      out.write("					'<div>경도: ' + lng + '</div>' +\r\n");
      out.write("					'<input type=\"text\" class=\"nickname-input\" placeholder=\"위치 설명\" oninput=\"updateNickname(' + index + ', this.value)\" />' +\r\n");
      out.write("					'<button onclick=\"deleteMarker(' + index + ')\">삭제</button>';\r\n");
      out.write("				savedCoords.appendChild(box);\r\n");
      out.write("				count++;\r\n");
      out.write("			} else {\r\n");
      out.write("				if (marker.info) marker.info.close();\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function filterMarkersByDay() {\r\n");
      out.write("		const selectedDay = document.getElementById('daySelector').value;\r\n");
      out.write("		savedMarkers.forEach(marker => {\r\n");
      out.write("			if (marker.day === selectedDay) {\r\n");
      out.write("				marker.marker.setMap(map);\r\n");
      out.write("				if (marker.info) marker.info.setMap(map);\r\n");
      out.write("			} else {\r\n");
      out.write("				marker.marker.setMap(null);\r\n");
      out.write("				if (marker.info) marker.info.setMap(null);\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		updateLocationList();\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function updateNickname(index, value) {\r\n");
      out.write("		savedMarkers[index].description = value;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function sendMarkersToServer() {\r\n");
      out.write("		const groupedByDay = {};\r\n");
      out.write("		savedMarkers.forEach(marker => {\r\n");
      out.write("			if (!groupedByDay[marker.day]) groupedByDay[marker.day] = [];\r\n");
      out.write("			groupedByDay[marker.day].push(marker);\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		const markersData = [];\r\n");
      out.write("		Object.keys(groupedByDay).forEach(day => {\r\n");
      out.write("			groupedByDay[day].forEach((marker, index) => {\r\n");
      out.write("				markersData.push({\r\n");
      out.write("					markerId: \"\", // 서버에서 생성하거나 UUID 생성 가능\r\n");
      out.write("					sd_code: sd_code,\r\n");
      out.write("					dayS: day,\r\n");
      out.write("					address: marker.address,\r\n");
      out.write("					lat: marker.latlng.getLat(),\r\n");
      out.write("					lng: marker.latlng.getLng(),\r\n");
      out.write("					dayOrder: index + 1,\r\n");
      out.write("					description: marker.description || \"\"\r\n");
      out.write("				});\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		console.log(\"전송할 마커 데이터:\", markersData);\r\n");
      out.write("\r\n");
      out.write("		fetch('");
      out.print(request.getContextPath());
      out.write("/tripMap', {\r\n");
      out.write("			method: 'POST',\r\n");
      out.write("			headers: { 'Content-Type': 'application/json; charset=UTF-8' },\r\n");
      out.write("			body: JSON.stringify(markersData)\r\n");
      out.write("		})\r\n");
      out.write("			.then(response => response.json())\r\n");
      out.write("			.then(data => {\r\n");
      out.write("				if (data.status === \"success\") {\r\n");
      out.write("					console.log(\"서버 전송 성공\");\r\n");
      out.write("					window.location.href = '");
      out.print(request.getContextPath());
      out.write("/tripSet';\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("			.catch(error => {\r\n");
      out.write("				console.error('전송 실패:', error);\r\n");
      out.write("			});\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
