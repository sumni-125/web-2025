/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-23 00:59:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import tripMate.model.Cost;

public final class costAdd_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("tripMate.model.Cost");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>TripMate - 소비 기록 추가</title>\r\n");
      out.write("<!-- Font Awesome 아이콘 폰트 -->\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\">\r\n");
      out.write("<link href=\"css/costAdd.css\" rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<!-- 상단 제목 -->\r\n");
      out.write("	<div class=\"top\">\r\n");
      out.write("		<h1>\r\n");
      out.write("			<i class=\"fa-solid fa-receipt\"></i> 소비기록 추가\r\n");
      out.write("		</h1>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<!-- 내용 입력 -->\r\n");
      out.write("	<div class=\"bottom\">\r\n");
      out.write("		<div class=\"content_wrap\">\r\n");
      out.write("			<div class=\"content\">\r\n");
      out.write("\r\n");
      out.write("				");

				// 서블릿이 전달한 파라미터 및 속성 꺼내기
				String sd_code = request.getParameter("sd_code"); // URL 파라미터로 받은 sd_code
				String tripName = (String) request.getAttribute("tripName"); // 여행 제목
				String tripPeriod = (String) request.getAttribute("tripPeriod"); // 여행 기간
				String[] tripDates = (String[]) request.getAttribute("tripDates"); // 여행 날짜 배열
				ArrayList<String> cats = (ArrayList<String>) request.getAttribute("category"); // 카테고리 목록
				ArrayList<String> types = (ArrayList<String>) request.getAttribute("paymentType"); // 결제수단 목록
				ArrayList<String> methods = (ArrayList<String>) request.getAttribute("paymentMethod"); // 결제방식 목록
				ArrayList<String> names = (ArrayList<String>) request.getAttribute("names"); // 참여자(결제자) 목록
				
      out.write("\r\n");
      out.write("\r\n");
      out.write("				<!-- 여행지 정보 및 부제목 -->\r\n");
      out.write("				<h3>\r\n");
      out.write("					");
      out.print(tripPeriod);
      out.write("\r\n");
      out.write("					<span class=\"subtitle\">여행 지출 내역 추가</span><br>\r\n");
      out.write("					");
      out.print(tripName);
      out.write("\r\n");
      out.write("				</h3>\r\n");
      out.write("\r\n");
      out.write("				<!-- /costAdd 서블릿으로 전송 -->\r\n");
      out.write("				<form\r\n");
      out.write("					action=\"");
      out.print(request.getContextPath());
      out.write("/costAdd?sd_code=");
      out.print(sd_code);
      out.write("\"\r\n");
      out.write("					method=\"post\">\r\n");
      out.write("					<!-- hidden 필드로 sd_code 유지 -->\r\n");
      out.write("					<input type=\"hidden\" name=\"sd_code\" value=\"");
      out.print(sd_code);
      out.write("\" />\r\n");
      out.write("\r\n");
      out.write("					<!-- 날짜 -->\r\n");
      out.write("					<label> <span>날짜</span> <select name=\"tripDate\" required>\r\n");
      out.write("							<option value=\"\" disabled selected hidden>날짜 선택</option>\r\n");
      out.write("							");

							for (String d : tripDates) {
							
      out.write("\r\n");
      out.write("							<option value=\"");
      out.print(d);
      out.write('"');
      out.write('>');
      out.print(d);
      out.write("</option>\r\n");
      out.write("							");

							}
							
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("					</label>\r\n");
      out.write("\r\n");
      out.write("					<!-- 결제 수단 -->\r\n");
      out.write("					<label> <span>결제 수단</span> <select name=\"paymentType\"\r\n");
      out.write("						required>\r\n");
      out.write("							<option value=\"\" disabled selected hidden>결제 수단 선택</option>\r\n");
      out.write("							");

							for (String t : types) {
							
      out.write("\r\n");
      out.write("							<option value=\"");
      out.print(t);
      out.write('"');
      out.write('>');
      out.print(t);
      out.write("</option>\r\n");
      out.write("							");

							}
							
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("					</label>\r\n");
      out.write("\r\n");
      out.write("					<!-- 장소 -->\r\n");
      out.write("					<label> <span>장소</span> <input type=\"text\" name=\"location\"\r\n");
      out.write("						placeholder=\"장소 입력\" required>\r\n");
      out.write("					</label>\r\n");
      out.write("\r\n");
      out.write("					<!-- 카테고리 -->\r\n");
      out.write("					<span>카테고리</span>\r\n");
      out.write("					<div class=\"category\">\r\n");
      out.write("						");

						for (String cat : cats) {
							String iconClass;
							switch (cat) {
							case "숙박":
								iconClass = "fa-bed";
								break;
							case "항공":
								iconClass = "fa-plane";
								break;
							case "교통":
								iconClass = "fa-car";
								break;
							case "식사":
								iconClass = "fa-utensils";
								break;
							case "관광":
								iconClass = "fa-camera";
								break;
							case "쇼핑":
								iconClass = "fa-shopping-bag";
								break;
							default:
								iconClass = "fa-ellipsis-h";
							}
						
      out.write("\r\n");
      out.write("						<label> <input type=\"radio\" name=\"category\"\r\n");
      out.write("							value=\"");
      out.print(cat);
      out.write("\" required> <i class=\"fas ");
      out.print(iconClass);
      out.write("\"></i>");
      out.print(cat);
      out.write("\r\n");
      out.write("						</label>\r\n");
      out.write("						");

						}
						
      out.write("\r\n");
      out.write("					</div>\r\n");
      out.write("\r\n");
      out.write("					<!-- 결제 금액 -->\r\n");
      out.write("					<label> <span>결제 금액</span> <input type=\"number\"\r\n");
      out.write("						name=\"amount\" placeholder=\"결제 금액 입력\" required>\r\n");
      out.write("					</label>\r\n");
      out.write("\r\n");
      out.write("					<!-- 결제 방식 -->\r\n");
      out.write("					<label> <span>결제 방식</span> <select name=\"paymentMethod\"\r\n");
      out.write("						required>\r\n");
      out.write("							<option value=\"\" disabled selected hidden>방식 선택</option>\r\n");
      out.write("							");

							for (String m : methods) {
							
      out.write("\r\n");
      out.write("							<option value=\"");
      out.print(m);
      out.write('"');
      out.write('>');
      out.print(m);
      out.write("</option>\r\n");
      out.write("							");

							}
							
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("					</label>\r\n");
      out.write("\r\n");
      out.write("					<!-- 결제자 -->\r\n");
      out.write("					<label> <span>결제자</span> <select name=\"payer\" required>\r\n");
      out.write("							<option value=\"\" disabled selected hidden>결제자 선택</option>\r\n");
      out.write("							");

							for (String n : names) {
							
      out.write("\r\n");
      out.write("							<option value=\"");
      out.print(n);
      out.write('"');
      out.write('>');
      out.print(n);
      out.write("</option>\r\n");
      out.write("							");

							}
							
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("					</label>\r\n");
      out.write("\r\n");
      out.write("					<!-- 이전, 등록버튼 -->\r\n");
      out.write("					<div class=\"bottom_button\">\r\n");
      out.write("						<a class=\"back\"\r\n");
      out.write("							href=\"");
      out.print(request.getContextPath());
      out.write("/cost?sd_code=");
      out.print(sd_code);
      out.write("\">이전</a>\r\n");
      out.write("						<button type=\"submit\" class=\"commit\">등록</button>\r\n");
      out.write("					</div>\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
