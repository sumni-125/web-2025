/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-23 00:59:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import tripMate.model.Cost;

public final class cost_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("tripMate.model.Cost");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>TripMate - 지출 내역</title>\r\n");
      out.write("<!-- 헤더 스타일 (변경) -->\r\n");
      out.write("<link href=\"");
      out.print(request.getContextPath());
      out.write("/css/header.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<!-- 아이콘 폰트 -->\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\">\r\n");
      out.write("<link href=\"css/cost.css\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

	// 서블릿이 전달한 속성 꺼내기 (변경)
	String sd_code = (String) request.getAttribute("sd_code");
	String tripName = (String) request.getAttribute("tripName");
	String tripPeriod = (String) request.getAttribute("tripPeriod");
	String[] tripDates = (String[]) request.getAttribute("tripDates");
	// list는 ArrayList<Cost> 그대로 사용
	ArrayList<Cost> list = (ArrayList<Cost>) request.getAttribute("list");
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<header>\r\n");
      out.write("		<div class=\"logo\">\r\n");
      out.write("			<!-- 로고 이미지 경로에 contextPath 적용 (변경) -->\r\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/main?sd_code=");
      out.print(sd_code);
      out.write("\">\r\n");
      out.write("				<img class=\"logoImg\"\r\n");
      out.write("				src=\"");
      out.print(request.getContextPath());
      out.write("/image/logo.png\" alt=\"로고\">\r\n");
      out.write("			</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/myTrip?sd_code=");
      out.print(sd_code);
      out.write("\">여행일정</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"\">관광지</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"\">블로그</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/myPage?sd_code=");
      out.print(sd_code);
      out.write("\">마이페이지</a>\r\n");
      out.write("		</div>\r\n");
      out.write("	</header>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"top\">\r\n");
      out.write("		<h1>\r\n");
      out.write("			<i class=\"fa-solid fa-calculator\"></i> 여행비 가계부\r\n");
      out.write("		</h1>\r\n");
      out.write("		<div class=\"button\">\r\n");
      out.write("			<button class=\"button1\"\r\n");
      out.write("				onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/cost?sd_code=");
      out.print(sd_code);
      out.write("'\">지출\r\n");
      out.write("				내역</button>\r\n");
      out.write("			<button class=\"button2\"\r\n");
      out.write("				onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/personalCost?sd_code=");
      out.print(sd_code);
      out.write("'\">개인\r\n");
      out.write("				정산 내역</button>\r\n");
      out.write("			<button class=\"button3\"\r\n");
      out.write("				onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/totalCost?sd_code=");
      out.print(sd_code);
      out.write("'\">총\r\n");
      out.write("				지출 내역</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"bottom\">\r\n");
      out.write("		<div class=\"content_wrap\">\r\n");
      out.write("			<div class=\"content\">\r\n");
      out.write("				<div class=\"content_title\">\r\n");
      out.write("					<h2>\r\n");
      out.write("						");
      out.print(tripPeriod);
      out.write("\r\n");
      out.write("						<span>여행 지출 내역</span><br>\r\n");
      out.write("						");
      out.print(tripName);
      out.write("\r\n");
      out.write("					</h2>\r\n");
      out.write("\r\n");
      out.write("					<!-- 날짜 선택 바 -->\r\n");
      out.write("					<select id=\"daySelect\" class=\"day_select\">\r\n");
      out.write("						<option value=\"\" disabled hidden>날짜를 선택하세요</option>\r\n");
      out.write("						");

						for (String d : tripDates) {
						
      out.write("\r\n");
      out.write("						<option value=\"");
      out.print(d);
      out.write('"');
      out.write('>');
      out.print(d);
      out.write("</option>\r\n");
      out.write("						");

						}
						
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("\r\n");
      out.write("					<!-- 소비기록 추가 버튼 -->\r\n");
      out.write("					<button class=\"button4\"\r\n");
      out.write("						onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/costAdd?sd_code=");
      out.print(sd_code);
      out.write("'\">소비기록\r\n");
      out.write("						추가</button>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<!-- 일별 지출 내역 -->\r\n");
      out.write("				<div class=\"day_container\">\r\n");
      out.write("					");

					for (int i = 0; i < tripDates.length; i++) {
						String date = tripDates[i];
					
      out.write("\r\n");
      out.write("					<div class=\"day\" data-date=\"");
      out.print(date);
      out.write("\">\r\n");
      out.write("						<p>\r\n");
      out.write("							Day");
      out.print(i + 1);
      out.write("\r\n");
      out.write("							|\r\n");
      out.write("							");
      out.print(date);
      out.write("</p>\r\n");
      out.write("						");

						for (Cost c : list) {
							if (!c.getTripDate().equals(date))
								continue;
							String ic;
							switch (c.getCategory()) {
								case "식사" :
							ic = "fa-utensils";
							break;
								case "관광" :
							ic = "fa-landmark";
							break;
								case "교통" :
							ic = "fa-car";
							break;
								case "숙박" :
							ic = "fa-bed";
							break;
								case "항공" :
							ic = "fa-plane";
							break;
								case "쇼핑" :
							ic = "fa-shopping-bag";
							break;
								default :
							ic = "fa-ellipsis-h";
							}
						
      out.write("\r\n");
      out.write("						<div class=\"cost_item\">\r\n");
      out.write("							<div class=\"left\">\r\n");
      out.write("								<i class=\"fas ");
      out.print(ic);
      out.write("\"></i>\r\n");
      out.write("								<div>\r\n");
      out.write("									<div class=\"category\">");
      out.print(c.getCategory());
      out.write("비\r\n");
      out.write("									</div>\r\n");
      out.write("									<div class=\"location\">");
      out.print(c.getLocation());
      out.write("</div>\r\n");
      out.write("								</div>\r\n");
      out.write("							</div>\r\n");
      out.write("							<div class=\"right\">\r\n");
      out.write("								<div class=\"amount\">");
      out.print(String.format("%,d원", c.getAmount()));
      out.write("</div>\r\n");
      out.write("								<div class=\"method\">\r\n");
      out.write("									(");
      out.print(c.getPaymentMethod());
      out.write(")\r\n");
      out.write("								</div>\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("						");

						}
						
      out.write("\r\n");
      out.write("					</div>\r\n");
      out.write("					");

					}
					
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("    const select = document.getElementById('daySelect');\r\n");
      out.write("    const days   = document.querySelectorAll('.day');\r\n");
      out.write("    // 페이지 로드 시 첫 번째 날짜 자동 선택 (추가)\r\n");
      out.write("    window.addEventListener('DOMContentLoaded', () => {\r\n");
      out.write("        if (select.options.length > 1) {\r\n");
      out.write("            select.selectedIndex = 1;              // 첫 번째 날짜 옵션 선택\r\n");
      out.write("            select.dispatchEvent(new Event('change'));\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("    select.addEventListener('change', () => {\r\n");
      out.write("        const v = select.value;\r\n");
      out.write("        days.forEach(d => d.style.display = (d.dataset.date === v) ? 'block' : 'none');\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
