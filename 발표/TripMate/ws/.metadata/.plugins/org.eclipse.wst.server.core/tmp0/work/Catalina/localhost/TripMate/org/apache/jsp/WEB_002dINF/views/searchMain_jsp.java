/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-23 00:58:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import tripMate.model.SearchDTO;
import java.util.List;

public final class searchMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("tripMate.model.SearchDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<!-- Head 태그 안에 추가 -->\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css\" />\n");
      out.write("<script\n");
      out.write("	src=\"https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js\"></script>\n");
      out.write("<link href=\"css/header.css\" rel=\"stylesheet\">\n");
      out.write("<link href=\"css/searchmain.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("	window.addEventListener(\"DOMContentLoaded\", function() {\n");
      out.write("		const swiper = new Swiper(\".mySwiper\", {\n");
      out.write("			slidesPerView : 4, // 가로 4개\n");
      out.write("			slidesPerGroup : 1, // 1열씩 이동\n");
      out.write("			grid : {\n");
      out.write("				rows : 2,\n");
      out.write("				fill : \"row\"\n");
      out.write("			},\n");
      out.write("			spaceBetween : 30,\n");
      out.write("			loop : true, // 👉 마지막 → 처음으로 자동 순환\n");
      out.write("			pagination : {\n");
      out.write("				el : \".swiper-pagination\",\n");
      out.write("				clickable : true\n");
      out.write("			},\n");
      out.write("			navigation : {\n");
      out.write("				nextEl : \".swiper-button-next\",\n");
      out.write("				prevEl : \".swiper-button-prev\"\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("	});\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	<header>\n");
      out.write("		<div class=\"logo\">\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/main\"><img class=\"logoImg\"\n");
      out.write("				src=\"image/logo.png\" alt=\"\"></a>\n");
      out.write("		</div>\n");
      out.write("		<div>\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/myTrip\">여행일정</a>\n");
      out.write("		</div>\n");
      out.write("		<div>\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/mainsearch\">관광지</a>\n");
      out.write("\n");
      out.write("		</div>\n");
      out.write("		<div>\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/mainblog\">블로그</a>\n");
      out.write("\n");
      out.write("		</div>\n");
      out.write("		<div>\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/myPage\">마이페이지</a>\n");
      out.write("\n");
      out.write("		</div>\n");
      out.write("	</header>\n");
      out.write("\n");
      out.write("	");

	List<SearchDTO> list = (List<SearchDTO>) request.getAttribute("list");
	
      out.write("\n");
      out.write("	<form action=\"/TripMate/list\" method=\"get\">\n");
      out.write("		<div class=\"input_st\">\n");
      out.write("			<button type=\"submit\">\n");
      out.write("				<!-- 검색로고 이미지 -->\n");
      out.write("				<img src=\"locimg/ico_search_b.svg\" class=\"img_cs\"\n");
      out.write("					style=\"width: 40px; height: 40px;\">\n");
      out.write("			</button>\n");
      out.write("			<!-- 이미지 넣기 -->\n");
      out.write("			<input type=\"text\" id=\"img_id\" name=\"id\">\n");
      out.write("\n");
      out.write("		</div>\n");
      out.write("	</form>\n");
      out.write("\n");
      out.write("	<hr>\n");
      out.write("\n");
      out.write("	");

	if (list != null && !list.isEmpty()) {
	
      out.write("\n");
      out.write("	<ul>\n");
      out.write("		");

		for (SearchDTO sd : list) {
		
      out.write("\n");
      out.write("		<h2>\n");
      out.write("			");
      out.print(sd.getLocation());
      out.write("\n");
      out.write("		</h2>\n");
      out.write("		");

		}
		
      out.write("\n");
      out.write("	</ul>\n");
      out.write("	");

	}
	
      out.write("\n");
      out.write("\n");
      out.write("	<!-- 전체 지역 보여줄 코드 -->\n");
      out.write("	");

	List<SearchDTO> locationList = (List<SearchDTO>) request.getAttribute("locationList");
	
      out.write("\n");
      out.write("\n");
      out.write("	<!-- 스와이프 라이브러리 사용 -->\n");
      out.write("	<div class=\"swiper mySwiper\">\n");
      out.write("		<div class=\"swiper-wrapper\">\n");
      out.write("			");

			for (SearchDTO loc : locationList) {
			
      out.write("\n");
      out.write("			<div class=\"swiper-slide\">\n");
      out.write("				<!-- getParmeter로 지정한 \"id\"를 가져와 해당 지역만 보여주기 -->\n");
      out.write("				<a href=\"/TripMate/list?id=");
      out.print(loc.getLocation());
      out.write("\">\n");
      out.write("					<div class=\"img_st\">\n");
      out.write("						<img\n");
      out.write("							src=\"");
      out.print(request.getContextPath());
      out.write("/locimg/");
      out.print(loc.getImg_url());
      out.write("\"\n");
      out.write("							alt=\"");
      out.print(loc.getLocation());
      out.write("\">\n");
      out.write("						<p class=\"loc_text\">");
      out.print(loc.getLocation());
      out.write("</p>\n");
      out.write("					</div>\n");
      out.write("				</a>\n");
      out.write("			</div>\n");
      out.write("			");

			}
			
      out.write("\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<!-- 네비게이션 (좌우 버튼) -->\n");
      out.write("		<div class=\"swiper-button-next\"></div>\n");
      out.write("		<div class=\"swiper-button-prev\"></div>\n");
      out.write("\n");
      out.write("		<!-- 페이지네이션 (점) -->\n");
      out.write("		<div class=\"swiper-pagination\"></div>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
