/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-23 00:59:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import tripMate.model.Cost;
import tripMate.model.PersonalCost;
import java.util.ArrayList;

public final class totalCost_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("tripMate.model.PersonalCost");
    _jspx_imports_classes.add("tripMate.model.Cost");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

// sdCode 파라미터 받기
String sd_code = request.getParameter("sd_code");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>TripMate - 총 지출 내역</title>\r\n");
      out.write("<!-- 헤더 스타일 -->\r\n");
      out.write("<link href=\"css/header.css\" rel=\"stylesheet\">\r\n");
      out.write("<!-- Font Awesome 아이콘 폰트 -->\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\">\r\n");
      out.write("<link href=\"css/totalCost.css\" rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<header>\r\n");
      out.write("		<div class=\"logo\">\r\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/main?sd_code=");
      out.print(sd_code);
      out.write("\"><img\r\n");
      out.write("				class=\"logoImg\" src=\"");
      out.print(request.getContextPath());
      out.write("/image/logo.png\"\r\n");
      out.write("				alt=\"\"></a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/myTrip?sd_code=");
      out.print(sd_code);
      out.write("\">여행일정</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"\">관광지</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"\">블로그</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/myPage?sd_code=");
      out.print(sd_code);
      out.write("\">마이페이지</a>\r\n");
      out.write("		</div>\r\n");
      out.write("	</header>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"top\">\r\n");
      out.write("		<h1>\r\n");
      out.write("			<i class=\"fa-solid fa-calculator\"></i> 여행비 가계부\r\n");
      out.write("		</h1>\r\n");
      out.write("		<div class=\"button\">\r\n");
      out.write("			<button class=\"button1\"\r\n");
      out.write("				onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/cost?sd_code=");
      out.print(sd_code);
      out.write("'\">지출\r\n");
      out.write("				내역</button>\r\n");
      out.write("			<button class=\"button2\"\r\n");
      out.write("				onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/personalCost?sd_code=");
      out.print(sd_code);
      out.write("'\">개인\r\n");
      out.write("				정산 내역</button>\r\n");
      out.write("			<button class=\"button3\"\r\n");
      out.write("				onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/totalCost?sd_code=");
      out.print(sd_code);
      out.write("'\">총\r\n");
      out.write("				지출 내역</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class=\"bottom\">\r\n");
      out.write("		<div class=\"content_wrap\">\r\n");
      out.write("			<div class=\"content\">\r\n");
      out.write("				<div class=\"content_title\">\r\n");
      out.write("					<h2>");
      out.print(request.getAttribute("tripPeriod"));
      out.write("\r\n");
      out.write("						<span>총 지출 내역</span><br>");
      out.print(request.getAttribute("tripName"));
      out.write("</h2>\r\n");
      out.write("					<form method=\"get\" action=\"");
      out.print(request.getContextPath());
      out.write("/totalCost\">\r\n");
      out.write("						<input type=\"hidden\" name=\"sd_code\" value=\"");
      out.print(sd_code);
      out.write("\" /> <select\r\n");
      out.write("							name=\"filterName\" class=\"person_select\"\r\n");
      out.write("							onchange=\"this.form.submit()\">\r\n");
      out.write("							<option value=\"\">-- 사용자 선택 --</option>\r\n");
      out.write("							");

							String[] names = (String[]) request.getAttribute("names");
							String filterName = (String) request.getAttribute("filterName");
							for (String n : names) {
							
      out.write("\r\n");
      out.write("							<option value=\"");
      out.print(n);
      out.write("\"\r\n");
      out.write("								");
      out.print(n.equals(filterName) ? "selected" : "");
      out.write('>');
      out.print(n);
      out.write("</option>\r\n");
      out.write("							");

							}
							
      out.write("\r\n");
      out.write("						</select>\r\n");
      out.write("					</form>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				");

				String[] categories = (String[]) request.getAttribute("categories");
				int filterIndex = (Integer) request.getAttribute("filterIndex");
				int[] sums = (int[]) request.getAttribute("sums");
				Cost[] costs = (Cost[]) request.getAttribute("costs");
				PersonalCost[] pcs = (PersonalCost[]) request.getAttribute("pcs");
				
      out.write("\r\n");
      out.write("\r\n");
      out.write("				");

				if (filterIndex < 0) {
				
      out.write("\r\n");
      out.write("				<p style=\"padding: 20px; color: #777;\">사용자를 선택해주세요.</p>\r\n");
      out.write("				");

				} else {
				for (int i = 0; i < categories.length; i++) {
					String cat = categories[i];
					int total = sums[i];
					String icon;
					switch (cat) {
					case "숙박":
						icon = "fa-bed";
						break;
					case "항공":
						icon = "fa-plane";
						break;
					case "교통":
						icon = "fa-bus";
						break;
					case "식사":
						icon = "fa-utensils";
						break;
					case "관광":
						icon = "fa-camera";
						break;
					case "쇼핑":
						icon = "fa-shopping-bag";
						break;
					default:
						icon = "fa-ellipsis";
					}
				
      out.write("\r\n");
      out.write("				<details>\r\n");
      out.write("					<summary>\r\n");
      out.write("						<div>\r\n");
      out.write("							<i class=\"fas ");
      out.print(icon);
      out.write("\"></i>");
      out.print(cat);
      out.write("</div>\r\n");
      out.write("						<div>");
      out.print(String.format("%,d원", total));
      out.write("</div>\r\n");
      out.write("					</summary>\r\n");
      out.write("					<div class=\"detail-list\">\r\n");
      out.write("						<table>\r\n");
      out.write("							<tr>\r\n");
      out.write("								<th>날짜</th>\r\n");
      out.write("								<th>장소</th>\r\n");
      out.write("								<th>금액</th>\r\n");
      out.write("							</tr>\r\n");
      out.write("							");

							String selCode = (String) request.getAttribute("filterUserCode");
							for (PersonalCost pc : pcs) {
								if (!pc.getUserCode().equals(selCode))
									continue;
								for (Cost c : costs) {
									if (!c.getCostId().equals(pc.getCostId()))
								continue;
									if (!c.getCategory().equals(cat))
								continue;
							
      out.write("\r\n");
      out.write("							<tr>\r\n");
      out.write("								<td>");
      out.print(c.getTripDate());
      out.write("</td>\r\n");
      out.write("								<td>");
      out.print(c.getLocation());
      out.write("</td>\r\n");
      out.write("								<td>");
      out.print(String.format("%,d원", pc.getPersonCost()));
      out.write("</td>\r\n");
      out.write("							</tr>\r\n");
      out.write("							");

							break;
							}
							}
							
      out.write("\r\n");
      out.write("						</table>\r\n");
      out.write("					</div>\r\n");
      out.write("				</details>\r\n");
      out.write("				");

				} // end for categories
				int grandTotal = 0;
				for (int v : sums)
				grandTotal += v;
				
      out.write("\r\n");
      out.write("				<div class=\"grand-total\">\r\n");
      out.write("					총 지출내역:\r\n");
      out.write("					");
      out.print(String.format("%,d원", grandTotal));
      out.write("</div>\r\n");
      out.write("				");

				} // end if
				
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
