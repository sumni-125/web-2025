/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-23 00:59:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import tripMate.model.User;

public final class myPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("tripMate.model.User");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>마이페이지</title>\r\n");
      out.write("<link href=\"css/header.css\" rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap');\r\n");
      out.write("* {\r\n");
      out.write("	font-family: \"Noto Sans KR\", serif;\r\n");
      out.write("	font-optical-sizing: auto;\r\n");
      out.write("	font-weight: 400;\r\n");
      out.write("	font-style: normal;\r\n");
      out.write("}\r\n");
      out.write("body, html {\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	overflow: hidden; \r\n");
      out.write("}\r\n");
      out.write("body{\r\n");
      out.write("	background-color: #f5f5f5;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container_wrap {\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	max-width: 50%;\r\n");
      out.write("	height: 100vh;\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	background-color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	height: 100%;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	gap: 25px;\r\n");
      out.write("		box-shadow: 0 2px 8px rgba(0,0,0,0.3);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".title{\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-size: 40px;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".updateForm{\r\n");
      out.write("	width: 55%;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	margin: 50px auto;\r\n");
      out.write("	gap: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".updateForm input{\r\n");
      out.write("	background-color: #f5f5f5;\r\n");
      out.write("	height: 55px;\r\n");
      out.write("	font-size: 25px;\r\n");
      out.write("	font-weight: 700;\r\n");
      out.write("	line-height: 30px;\r\n");
      out.write("	padding: 2px 20px;\r\n");
      out.write("	outline: none;\r\n");
      out.write("	border-style: none;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	box-shadow: 0 2px 8px rgba(0,0,0,0.3);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".btn {\r\n");
      out.write("	height: 50px;\r\n");
      out.write("	font-size: 25px;\r\n");
      out.write("	font-weight: 500;\r\n");
      out.write("	line-height: 30px;\r\n");
      out.write("	border: none;\r\n");
      out.write("	padding: 10px 0;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	background-color: #0095F6;\r\n");
      out.write("	color: white;\r\n");
      out.write("	box-shadow: 0 2px 8px rgba(0,0,0,0.4);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".btn:hover {\r\n");
      out.write("	filter: brightness(110%);\r\n");
      out.write("	transition: filter 0.2s;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write(".updateForm input::placeholder {\r\n");
      out.write("	color: #999;\r\n");
      out.write("	font-weight: 600;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".updateForm>input[name=\"nick\"]{\r\n");
      out.write("	margin-bottom: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".logout {\r\n");
      out.write("	margin-bottom: 70px;\r\n");
      out.write("	font-size: 24px;\r\n");
      out.write("}\r\n");
      out.write(".logout a {\r\n");
      out.write("	color: black;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".logout a:hover{\r\n");
      out.write("	text-decoration: underline;\r\n");
      out.write("	color: #0095F6;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<header>\r\n");
      out.write("	<div class=\"logo\">\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/main\"><img class=\"logoImg\" src=\"image/logo.png\"\r\n");
      out.write("			alt=\"\"></a>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/myTrip\">여행일정</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/mainsearch\">관광지</a>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/mainblog\">블로그</a>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"");
      out.print(request.getContextPath());
      out.write("/myPage\">마이페이지</a>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("</header>\r\n");
      out.write("	");

	User user = (User) session.getAttribute("user");
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"container_wrap\">\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<div class=\"title\">계정 정보 수정</div>\r\n");
      out.write("			<form class=\"updateForm\"\r\n");
      out.write("				action=\"");
      out.print(request.getContextPath());
      out.write("/myPage\" method=\"post\">\r\n");
      out.write("				<input type=\"text\" placeholder=\"아이디\" name=\"id\" value=\"");
      out.print(user.getId());
      out.write("\">\r\n");
      out.write("				<input type=\"password\" placeholder=\"비밀번호\" name=\"pw\" value=\"");
      out.print(user.getPw());
      out.write("\">\r\n");
      out.write("				<input type=\"text\" placeholder=\"닉네임\" name=\"nick\" value=\"");
      out.print(user.getNick());
      out.write("\">\r\n");
      out.write("				<button class=\"btn\" type=\"submit\">수정</button>\r\n");
      out.write("				<!-- 			<div> -->\r\n");
      out.write("				<!-- 				<label>아이디</label><br> <input type=\"text\" name=\"id\" -->\r\n");
      out.write("				");
      out.write("\r\n");
      out.write("				<!-- 			</div> -->\r\n");
      out.write("				<!-- 			<div> -->\r\n");
      out.write("				<!-- 				<label>비밀번호</label><br> <input type=\"password\" name=\"pw\" -->\r\n");
      out.write("				<!-- 					placeholder=\"비밀번호\" value=\"\"> -->\r\n");
      out.write("				<!-- 			</div> -->\r\n");
      out.write("				<!-- 			<div> -->\r\n");
      out.write("				<!-- 				<label>닉네임</label><br> <input type=\"text\" name=\"nick\" -->\r\n");
      out.write("				");
      out.write("\r\n");
      out.write("				<!-- 			</div> -->\r\n");
      out.write("				<!-- 			<button class=\"btn\" type=\"submit\">수정</button> -->\r\n");
      out.write("			</form>\r\n");
      out.write("			<div class=\"logout\">\r\n");
      out.write("			<a href=\"");
      out.print(request.getContextPath());
      out.write("/logout\">로그아웃</a>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
